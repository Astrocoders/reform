// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReactUpdate = require("reason-react-update/src/ReactUpdate.bs.js");

function Make(Config) {
  var Validation = /* module */[];
  var filterFieldsStateByField = function (validators, fieldFilter) {
    return Belt_Array.keep(validators, (function (validator) {
                  return Caml_obj.caml_equal(/* Field */[validator[0]], fieldFilter);
                }));
  };
  var validateField = function (validator, values) {
    switch (validator.tag | 0) {
      case 0 : 
          var field = validator[0];
          var match = (/\S+@\S+\.\S+/).test(Curry._2(Config[/* get */1], values, field));
          return /* tuple */[
                  /* Field */[field],
                  match ? /* Valid */1 : /* Error */["invalid email"]
                ];
      case 1 : 
          return /* tuple */[
                  /* Field */[validator[0]],
                  /* Valid */1
                ];
      case 2 : 
          var field$1 = validator[0];
          var match$1 = Curry._2(Config[/* get */1], values, field$1) > validator[1];
          return /* tuple */[
                  /* Field */[field$1],
                  match$1 ? /* Valid */1 : /* Error */["Below minimum"]
                ];
      case 3 : 
          return /* tuple */[
                  /* Field */[validator[0]],
                  Curry._1(validator[1], values)
                ];
      
    }
  };
  var getInitialFieldsState = function (schema) {
    return Belt_Array.map(schema[0], (function (validator) {
                  return /* tuple */[
                          /* Field */[validator[0]],
                          /* Pristine */0
                        ];
                }));
  };
  var getFieldsState = function (schema, values) {
    return Belt_Array.map(schema[0], (function (validator) {
                  return validateField(validator, values);
                }));
  };
  var getFieldState = function (schema, values, field) {
    return Belt_Array.get(Belt_Array.map(filterFieldsStateByField(schema[0], field), (function (validator) {
                      return validateField(validator, values);
                    })), 0);
  };
  var use = function (initialState, schema, onSubmit, $staropt$star, param) {
    var onSubmitFail = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          return /* () */0;
        });
    var match = ReactUpdate.useReducer(/* record */[
          /* formState : Pristine */2,
          /* values */initialState,
          /* fieldsState */getInitialFieldsState(schema)
        ], (function (action, state) {
            if (typeof action === "number") {
              switch (action) {
                case 0 : 
                    var fieldsState = getFieldsState(schema, state[/* values */1]);
                    var match = Belt_Array.some(fieldsState, (function (param) {
                            if (typeof param[1] === "number") {
                              return false;
                            } else {
                              return true;
                            }
                          }));
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */match ? /* Errored */3 : /* Valid */4,
                                /* values */state[/* values */1],
                                /* fieldsState */fieldsState
                              ]]);
                case 1 : 
                    return /* SideEffects */Block.__(2, [(function (self) {
                                  var fieldsState = getFieldsState(schema, self[/* state */1][/* values */1]);
                                  Curry._1(self[/* send */0], /* SetFieldsState */Block.__(1, [fieldsState]));
                                  if (Belt_Array.every(fieldsState, (function (param) {
                                            return param[1] === /* Valid */1;
                                          }))) {
                                    Curry._1(self[/* send */0], /* SetFormState */Block.__(7, [/* Valid */4]));
                                    Curry._1(self[/* send */0], /* Submit */2);
                                  } else {
                                    Curry._1(onSubmitFail, /* record */[
                                          /* send */self[/* send */0],
                                          /* state */self[/* state */1]
                                        ]);
                                    Curry._1(self[/* send */0], /* SetFormState */Block.__(7, [/* Errored */3]));
                                  }
                                  return undefined;
                                })]);
                case 2 : 
                    return /* UpdateWithSideEffects */Block.__(1, [
                              /* record */[
                                /* formState : Submitting */1,
                                /* values */state[/* values */1],
                                /* fieldsState */state[/* fieldsState */2]
                              ],
                              (function (self) {
                                  return Curry._1(onSubmit, /* record */[
                                              /* send */self[/* send */0],
                                              /* state */self[/* state */1]
                                            ]);
                                })
                            ]);
                
              }
            } else {
              switch (action.tag | 0) {
                case 0 : 
                    var field = action[0];
                    var fieldValidated = getFieldState(schema, state[/* values */1], field);
                    return /* Update */Block.__(0, [/* record */[
                                /* formState : Dirty */0,
                                /* values */state[/* values */1],
                                /* fieldsState */Belt_Array.concat(Belt_Array.keep(state[/* fieldsState */2], (function (elem) {
                                            return Caml_obj.caml_notequal(elem[0], field);
                                          })), fieldValidated !== undefined ? /* array */[fieldValidated] : /* array */[])
                              ]]);
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */state[/* formState */0],
                                /* values */state[/* values */1],
                                /* fieldsState */action[0]
                              ]]);
                case 2 : 
                    return /* NoUpdate */0;
                case 3 : 
                    var field$1 = action[0];
                    var match$1 = state[/* formState */0] === /* Errored */3;
                    return /* UpdateWithSideEffects */Block.__(1, [
                              /* record */[
                                /* formState */match$1 ? /* Errored */3 : /* Dirty */0,
                                /* values */Curry._3(Config[/* set */0], state[/* values */1], field$1, action[1]),
                                /* fieldsState */state[/* fieldsState */2]
                              ],
                              (function (self) {
                                  Curry._1(self[/* send */0], /* ValidateField */Block.__(0, [/* Field */[field$1]]));
                                  return undefined;
                                })
                            ]);
                case 4 : 
                    var field$2 = action[0];
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */state[/* formState */0],
                                /* values */Curry._3(Config[/* set */0], state[/* values */1], field$2, Belt_Array.concat(/* array */[action[1]], Curry._2(Config[/* get */1], state[/* values */1], field$2))),
                                /* fieldsState */state[/* fieldsState */2]
                              ]]);
                case 5 : 
                    var index = action[1];
                    var field$3 = action[0];
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */state[/* formState */0],
                                /* values */Curry._3(Config[/* set */0], state[/* values */1], field$3, Belt_Array.keepWithIndex(Curry._2(Config[/* get */1], state[/* values */1], field$3), (function (param, i) {
                                            return i !== index;
                                          }))),
                                /* fieldsState */state[/* fieldsState */2]
                              ]]);
                case 6 : 
                    var predicate = action[1];
                    var field$4 = action[0];
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */state[/* formState */0],
                                /* values */Curry._3(Config[/* set */0], state[/* values */1], field$4, Belt_Array.keep(Curry._2(Config[/* get */1], state[/* values */1], field$4), (function (entry) {
                                            return !Curry._1(predicate, entry);
                                          }))),
                                /* fieldsState */state[/* fieldsState */2]
                              ]]);
                case 7 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* formState */action[0],
                                /* values */state[/* values */1],
                                /* fieldsState */state[/* fieldsState */2]
                              ]]);
                
              }
            }
          }));
    var send = match[1];
    var state = match[0];
    var getFieldState$1 = function (field) {
      var field$1 = Belt_List.getBy($$Array.to_list(state[/* fieldsState */2]), (function (param) {
              var match = Caml_obj.caml_equal(param[0], field);
              if (match) {
                return true;
              } else {
                return false;
              }
            }));
      if (field$1 !== undefined) {
        return field$1[1];
      } else {
        return /* Pristine */0;
      }
    };
    return /* record */[
            /* state */state,
            /* getFieldState */getFieldState$1,
            /* handleChange */(function (field, value) {
                return Curry._1(send, /* FieldChangeValue */Block.__(3, [
                              field,
                              value
                            ]));
              }),
            /* submit */(function (param) {
                return Curry._1(send, /* TrySubmit */1);
              })
          ];
  };
  return /* module */[
          /* Validation */Validation,
          /* filterFieldsStateByField */filterFieldsStateByField,
          /* validateField */validateField,
          /* getInitialFieldsState */getInitialFieldsState,
          /* getFieldsState */getFieldsState,
          /* getFieldState */getFieldState,
          /* use */use
        ];
}

exports.Make = Make;
/* ReactUpdate Not a pure module */
