// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReForm_Validation = require("./ReForm_Validation.js");

function safeHd(lst) {
  var match = List.length(lst) === 0;
  if (match) {
    return undefined;
  } else {
    return Caml_option.some(List.hd(lst));
  }
}

function $great$great$eq(value, map) {
  if (value !== undefined) {
    return Curry._1(map, Caml_option.valFromOption(value));
  }
  
}

var Helpers = 0;

var Validation = 0;

var Value = 0;

function Create(funarg) {
  var getFieldLens = function (field) {
    return List.find((function (param) {
                  return param[0] === field;
                }), funarg[/* lens */0]);
  };
  var validateField = function (field, values, value, schema, i18n) {
    return $great$great$eq(safeHd(List.filter((function (param) {
                            return param[0] === field;
                          }))(schema)), (function (fieldSchema) {
                  return ReForm_Validation.getValidationError(fieldSchema, values, value, i18n);
                }));
  };
  var handleChange = function (param, values) {
    var match = getFieldLens(param[0]);
    return Curry._2(match[2], values, param[1]);
  };
  var Field = /* module */[
    /* getFieldLens */getFieldLens,
    /* validateField */validateField,
    /* handleChange */handleChange
  ];
  var component = ReasonReact.reducerComponent("ReForm");
  var ReForm$Create = function (Props) {
    var onSubmit = Props.onSubmit;
    var match = Props.onSubmitFail;
    var onSubmitFail = match !== undefined ? match : (function (prim) {
          return /* () */0;
        });
    var match$1 = Props.onFormStateChange;
    var onFormStateChange = match$1 !== undefined ? match$1 : (function (prim) {
          return /* () */0;
        });
    var match$2 = Props.validate;
    var validate = match$2 !== undefined ? match$2 : (function (param) {
          return undefined;
        });
    var initialState = Props.initialState;
    var schema = Props.schema;
    var match$3 = Props.i18n;
    var i18n = match$3 !== undefined ? match$3 : ReForm_Validation.I18n[/* en */1];
    var children = Props.children;
    return ReactCompat.useRecordApi(/* record */[
                /* debugName */component[/* debugName */0],
                /* reactClassInternal */component[/* reactClassInternal */1],
                /* handedOffState */component[/* handedOffState */2],
                /* willReceiveProps */component[/* willReceiveProps */3],
                /* didMount */component[/* didMount */4],
                /* didUpdate */component[/* didUpdate */5],
                /* willUnmount */component[/* willUnmount */6],
                /* willUpdate */component[/* willUpdate */7],
                /* shouldUpdate */component[/* shouldUpdate */8],
                /* render */(function (self) {
                    var handleChange = function (field, value) {
                      return Curry._1(self[/* send */3], /* HandleChange */Block.__(4, [/* tuple */[
                                      field,
                                      value
                                    ]]));
                    };
                    var handleGlobalValidation = function (error) {
                      return Curry._1(self[/* send */3], /* HandleError */Block.__(3, [error]));
                    };
                    var handleSubmit = function (param) {
                      return Curry._1(self[/* send */3], /* TrySubmit */0);
                    };
                    var resetFormState = function (param) {
                      return Curry._1(self[/* send */3], /* ResetFormState */2);
                    };
                    var getErrorForField = function (field) {
                      return $great$great$eq(safeHd(List.map((function (param) {
                                            return param[1];
                                          }), List.filter((function (param) {
                                                  return param[0] === field;
                                                }))(self[/* state */1][/* errors */2]))), (function (i) {
                                    return i;
                                  }));
                    };
                    var setFocusedField = function (field) {
                      return Curry._1(self[/* send */3], /* HandleSetFocusedField */Block.__(5, [field]));
                    };
                    var unsetFocusedField = function (param) {
                      return Curry._1(self[/* send */3], /* HandleUnsetFocusedField */3);
                    };
                    return Curry._1(children, /* record */[
                                /* form */self[/* state */1],
                                /* handleChange */handleChange,
                                /* handleGlobalValidation */handleGlobalValidation,
                                /* handleSubmit */handleSubmit,
                                /* getErrorForField */getErrorForField,
                                /* resetFormState */resetFormState,
                                /* setFocusedField */setFocusedField,
                                /* unsetFocusedField */unsetFocusedField,
                                /* focusedField */self[/* state */1][/* focusedField */4]
                              ]);
                  }),
                /* initialState */(function (param) {
                    return /* record */[
                            /* values */initialState,
                            /* isSubmitting */false,
                            /* errors : [] */0,
                            /* error */undefined,
                            /* focusedField */undefined
                          ];
                  }),
                /* retainedProps */component[/* retainedProps */11],
                /* reducer */(function (action, state) {
                    if (typeof action === "number") {
                      switch (action) {
                        case 0 : 
                            return /* SideEffects */Block.__(1, [(function (self) {
                                          var globalValidationError = Curry._1(validate, self[/* state */1][/* values */0]);
                                          var fieldsValidationErrors = List.filter((function (param) {
                                                    return param[1] !== undefined;
                                                  }))(List.map((function (param) {
                                                      var fieldName = param[0];
                                                      var match = getFieldLens(fieldName);
                                                      return /* tuple */[
                                                              fieldName,
                                                              validateField(fieldName, self[/* state */1][/* values */0], Curry._1(match[1], self[/* state */1][/* values */0]), schema, i18n)
                                                            ];
                                                    }), schema));
                                          Curry._1(self[/* send */3], /* SetFieldsErrors */Block.__(1, [fieldsValidationErrors]));
                                          Curry._1(self[/* send */3], /* HandleError */Block.__(3, [globalValidationError]));
                                          var match = globalValidationError === undefined && List.length(fieldsValidationErrors) === 0;
                                          if (match) {
                                            return Curry._1(self[/* send */3], /* HandleSubmit */1);
                                          } else {
                                            return Curry._1(onSubmitFail, fieldsValidationErrors);
                                          }
                                        })]);
                        case 1 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */true,
                                        /* errors */state[/* errors */2],
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          Curry._1(onSubmit, /* record */[
                                                /* values */state[/* values */0],
                                                /* setSubmitting */(function (isSubmitting) {
                                                    return Curry._1(self[/* send */3], /* HandleSubmitting */Block.__(0, [isSubmitting]));
                                                  }),
                                                /* setError */(function (error) {
                                                    return Curry._1(self[/* send */3], /* HandleError */Block.__(3, [error]));
                                                  }),
                                                /* resetFormState */(function (param) {
                                                    return Curry._1(self[/* send */3], /* ResetFormState */2);
                                                  })
                                              ]);
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 2 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */initialState,
                                        /* isSubmitting */false,
                                        /* errors : [] */0,
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 3 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */state[/* isSubmitting */1],
                                        /* errors */state[/* errors */2],
                                        /* error */state[/* error */3],
                                        /* focusedField */undefined
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        
                      }
                    } else {
                      switch (action.tag | 0) {
                        case 0 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */action[0],
                                        /* errors */state[/* errors */2],
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 1 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */false,
                                        /* errors */action[0],
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 2 : 
                            var match = action[0];
                            var field = match[0];
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */state[/* isSubmitting */1],
                                        /* errors */List.append(/* :: */[
                                              /* tuple */[
                                                field,
                                                validateField(field, state[/* values */0], match[1], schema, i18n)
                                              ],
                                              /* [] */0
                                            ], List.filter((function (param) {
                                                      return param[0] !== field;
                                                    }))(state[/* errors */2])),
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 3 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */false,
                                        /* errors */state[/* errors */2],
                                        /* error */action[0],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        case 4 : 
                            var match$1 = action[0];
                            var value = match$1[1];
                            var field$1 = match$1[0];
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */handleChange(/* tuple */[
                                              field$1,
                                              value
                                            ], state[/* values */0]),
                                        /* isSubmitting */state[/* isSubmitting */1],
                                        /* errors */state[/* errors */2],
                                        /* error */state[/* error */3],
                                        /* focusedField */state[/* focusedField */4]
                                      ],
                                      (function (self) {
                                          return Curry._1(self[/* send */3], /* HandleFieldValidation */Block.__(2, [/* tuple */[
                                                          field$1,
                                                          value
                                                        ]]));
                                        })
                                    ]);
                        case 5 : 
                            return /* UpdateWithSideEffects */Block.__(2, [
                                      /* record */[
                                        /* values */state[/* values */0],
                                        /* isSubmitting */state[/* isSubmitting */1],
                                        /* errors */state[/* errors */2],
                                        /* error */state[/* error */3],
                                        /* focusedField */Caml_option.some(action[0])
                                      ],
                                      (function (self) {
                                          return Curry._1(onFormStateChange, self[/* state */1]);
                                        })
                                    ]);
                        
                      }
                    }
                  }),
                /* jsElementWrapped */component[/* jsElementWrapped */13]
              ]);
  };
  return [
          Field,
          ReForm$Create
        ];
}

exports.Helpers = Helpers;
exports.Validation = Validation;
exports.Value = Value;
exports.Create = Create;
/* ReactCompat Not a pure module */
