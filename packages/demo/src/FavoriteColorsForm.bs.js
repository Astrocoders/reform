// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReFormNext = require("bs-reform/src/ReFormNext.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReForm_Helpers = require("bs-reform/src/ReForm_Helpers.js");

function get(t, field) {
  if (field) {
    return t[/* hex */1];
  } else {
    return t[/* name */0];
  }
}

function set(t, field, value) {
  if (field) {
    return /* record */[
            /* name */t[/* name */0],
            /* hex */value
          ];
  } else {
    return /* record */[
            /* name */value,
            /* hex */t[/* hex */1]
          ];
  }
}

var FavoriteColorsLenses = /* module */[
  /* get */get,
  /* set */set
];

function get$1(state, field) {
  if (field) {
    return state[/* favoriteColors */1];
  } else {
    return state[/* name */0];
  }
}

function set$1(state, field, value) {
  if (field) {
    return /* record */[
            /* name */state[/* name */0],
            /* favoriteColors */value
          ];
  } else {
    return /* record */[
            /* name */value,
            /* favoriteColors */state[/* favoriteColors */1]
          ];
  }
}

var StateLenses = /* module */[
  /* get */get$1,
  /* set */set$1
];

var Form = ReFormNext.Make([
      set$1,
      get$1
    ]);

function FavoriteColorsForm(Props) {
  var match = Curry._5(Form[/* use */6], /* record */[
        /* name */"",
        /* favoriteColors : array */[]
      ], /* Schema */[/* array */[
          /* Custom */Block.__(3, [
              /* Name */0,
              (function (values) {
                  var match = values[/* name */0].length < 5;
                  if (match) {
                    return /* Error */["Invalid name"];
                  } else {
                    return /* Valid */1;
                  }
                })
            ]),
          /* Custom */Block.__(3, [
              /* FavoriteColors */1,
              (function (param) {
                  var favoriteColors = param[/* favoriteColors */1];
                  var length = favoriteColors.length;
                  var match = length < 0 || Belt_Array.some(favoriteColors, (function (favColor) {
                          return favColor[/* hex */1].length === 0;
                        }));
                  if (match) {
                    return /* Error */["Invalid colors"];
                  } else {
                    return /* Valid */1;
                  }
                })
            ])
        ]], (function (param) {
          return undefined;
        }), undefined, /* () */0);
  var submit = match[/* submit */7];
  var arrayRemoveByIndex = match[/* arrayRemoveByIndex */5];
  var arrayUpdateByIndex = match[/* arrayUpdateByIndex */4];
  var arrayPush = match[/* arrayPush */3];
  var state = match[/* state */0];
  var partial_arg = Curry._1(match[/* handleChange */2], /* Name */0);
  var param = Curry._1(match[/* getFieldState */1], /* Field */[/* Name */0]);
  var __x = typeof param === "number" ? undefined : param[0];
  return React.createElement("form", {
              onSubmit: (function ($$event) {
                  $$event.preventDefault();
                  return Curry._1(submit, /* () */0);
                })
            }, React.createElement("label", undefined, React.createElement("span", undefined, "Name:"), React.createElement("input", {
                      value: state[/* values */1][/* name */0],
                      onChange: (function (param) {
                          return ReForm_Helpers.handleDomFormChange(partial_arg, param);
                        })
                    }), React.createElement("p", undefined, Belt_Option.getWithDefault(__x, ""))), React.createElement("button", {
                  onClick: (function (param) {
                      return Curry._2(arrayPush, /* FavoriteColors */1, /* record */[
                                  /* name */"",
                                  /* hex */""
                                ]);
                    })
                }, "Add color"), Belt_Array.mapWithIndex(state[/* values */1][/* favoriteColors */1], (function (index, favColor) {
                    return React.createElement(React.Fragment, undefined, React.createElement("hr", undefined), React.createElement("label", undefined, React.createElement("span", undefined, "Name:"), React.createElement("input", {
                                        value: favColor[/* name */0],
                                        onChange: (function (param) {
                                            return ReForm_Helpers.handleDomFormChange((function (name) {
                                                          return Curry._3(arrayUpdateByIndex, /* FavoriteColors */1, index, /* record */[
                                                                      /* name */name,
                                                                      /* hex */favColor[/* hex */1]
                                                                    ]);
                                                        }), param);
                                          })
                                      })), React.createElement("label", undefined, React.createElement("span", undefined, "Hex:"), React.createElement("input", {
                                        value: favColor[/* hex */1],
                                        onChange: (function (param) {
                                            return ReForm_Helpers.handleDomFormChange((function (hex) {
                                                          return Curry._3(arrayUpdateByIndex, /* FavoriteColors */1, index, /* record */[
                                                                      /* name */favColor[/* name */0],
                                                                      /* hex */hex
                                                                    ]);
                                                        }), param);
                                          })
                                      })), React.createElement("button", {
                                    onClick: (function (param) {
                                        return Curry._2(arrayRemoveByIndex, /* FavoriteColors */1, index);
                                      })
                                  }, "Remove"), React.createElement("hr", undefined));
                  })));
}

var make = FavoriteColorsForm;

exports.FavoriteColorsLenses = FavoriteColorsLenses;
exports.StateLenses = StateLenses;
exports.Form = Form;
exports.make = make;
/* Form Not a pure module */
